
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000003d6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d8  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000630  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000690  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006128  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f6  00000000  00000000  00007d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00008012  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000021f  00000000  00000000  00008032  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	37 d0       	rcall	.+110    	; 0xf6 <main>
  88:	a4 c1       	rjmp	.+840    	; 0x3d2 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <display_number>:

void display_number(int num);
void check_switches(void);

void display_number(int num) {
	PORTD = segment_numbers[num / 10];
  8c:	6a e0       	ldi	r22, 0x0A	; 10
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	79 d1       	rcall	.+754    	; 0x384 <__divmodhi4>
  92:	fb 01       	movw	r30, r22
  94:	e8 59       	subi	r30, 0x98	; 152
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	20 81       	ld	r18, Z
  9a:	22 bb       	out	0x12, r18	; 18
	PORTC = segment_numbers[num % 10];
  9c:	fc 01       	movw	r30, r24
  9e:	e8 59       	subi	r30, 0x98	; 152
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	80 81       	ld	r24, Z
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	08 95       	ret

000000a8 <check_switches>:
}

void check_switches(void) {
	if (!(PINB & (1 << PB0))) mode = NORMAL;
  a8:	b0 99       	sbic	0x16, 0	; 22
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <check_switches+0xc>
  ac:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
  b0:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
	if (!(PINB & (1 << PB1))) mode = SET_RED;
  b4:	b1 99       	sbic	0x16, 1	; 22
  b6:	06 c0       	rjmp	.+12     	; 0xc4 <check_switches+0x1c>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
  c0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
	if (!(PINB & (1 << PB2))) mode = SET_GREEN;
  c4:	b2 99       	sbic	0x16, 2	; 22
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <check_switches+0x2c>
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
  d0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
	if (!(PINB & (1 << PB3))) mode = BLINK_RED;
  d4:	b3 99       	sbic	0x16, 3	; 22
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <check_switches+0x3c>
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
  e0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
	if (!(PINB & (1 << PB4))) mode = OFF;
  e4:	b4 99       	sbic	0x16, 4	; 22
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <check_switches+0x4c>
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
  f0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
  f4:	08 95       	ret

000000f6 <main>:
}

int main(void) {
	DDRA = 0x07;
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x7F;
  fa:	8f e7       	ldi	r24, 0x7F	; 127
  fc:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x7F;
  fe:	81 bb       	out	0x11, r24	; 17
	DDRB = 0x00;
 100:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF; // ???? ???? Pull-Up ????? ???? ???????
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	88 bb       	out	0x18, r24	; 24
			}
		}
		else if (mode == BLINK_RED) {
			while (mode == BLINK_RED) {
				check_switches();
				PORTA = 0x04;
 106:	68 94       	set
 108:	ff 24       	eor	r15, r15
 10a:	f2 f8       	bld	r15, 2
				PORTD = segment_po[0];
 10c:	06 e6       	ldi	r16, 0x66	; 102
 10e:	10 e0       	ldi	r17, 0x00	; 0
					_delay_ms(200);
				}
			}
		}
		else if (mode == SET_GREEN) {
			PORTA = 0x01; // ???? ??? ???? ?????
 110:	ee 24       	eor	r14, r14
 112:	e3 94       	inc	r14
				if (mode != NORMAL) break;
				display_number(i);
				_delay_ms(1000);
			}

			PORTA = 0x02;
 114:	68 94       	set
 116:	dd 24       	eor	r13, r13
 118:	d1 f8       	bld	r13, 1
	DDRD = 0x7F;
	DDRB = 0x00;
	PORTB = 0xFF; // ???? ???? Pull-Up ????? ???? ???????

	while (1) {
		check_switches();
 11a:	c6 df       	rcall	.-116    	; 0xa8 <check_switches>

		if (mode == NORMAL) {
 11c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 120:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 124:	89 2b       	or	r24, r25
 126:	09 f0       	breq	.+2      	; 0x12a <main+0x34>
 128:	54 c0       	rjmp	.+168    	; 0x1d2 <main+0xdc>
			PORTA = 0x04;
 12a:	fb ba       	out	0x1b, r15	; 27
			for (int i = red_time; i >= 0; i--) {
 12c:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <red_time>
 130:	d0 91 65 00 	lds	r29, 0x0065	; 0x800065 <red_time+0x1>
 134:	dd 23       	and	r29, r29
				check_switches();
 136:	a4 f0       	brlt	.+40     	; 0x160 <main+0x6a>
 138:	b7 df       	rcall	.-146    	; 0xa8 <check_switches>
				if (mode != NORMAL) break;
 13a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 13e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 142:	89 2b       	or	r24, r25
				display_number(i);
 144:	69 f4       	brne	.+26     	; 0x160 <main+0x6a>
 146:	ce 01       	movw	r24, r28
 148:	a1 df       	rcall	.-190    	; 0x8c <display_number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	89 e6       	ldi	r24, 0x69	; 105
 14e:	98 e1       	ldi	r25, 0x18	; 24
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x5a>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x64>
 15a:	00 00       	nop
	while (1) {
		check_switches();

		if (mode == NORMAL) {
			PORTA = 0x04;
			for (int i = red_time; i >= 0; i--) {
 15c:	21 97       	sbiw	r28, 0x01	; 1
 15e:	60 f7       	brcc	.-40     	; 0x138 <main+0x42>
				if (mode != NORMAL) break;
				display_number(i);
				_delay_ms(1000);
			}

			PORTA = 0x01;
 160:	eb ba       	out	0x1b, r14	; 27
			for (int i = green_time; i >= 0; i--) {
 162:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <green_time>
 166:	d0 91 63 00 	lds	r29, 0x0063	; 0x800063 <green_time+0x1>
 16a:	dd 23       	and	r29, r29
				check_switches();
 16c:	a4 f0       	brlt	.+40     	; 0x196 <main+0xa0>
 16e:	9c df       	rcall	.-200    	; 0xa8 <check_switches>
				if (mode != NORMAL) break;
 170:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 174:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 178:	89 2b       	or	r24, r25
				display_number(i);
 17a:	69 f4       	brne	.+26     	; 0x196 <main+0xa0>
 17c:	ce 01       	movw	r24, r28
 17e:	86 df       	rcall	.-244    	; 0x8c <display_number>
 180:	ff ef       	ldi	r31, 0xFF	; 255
 182:	29 e6       	ldi	r18, 0x69	; 105
 184:	88 e1       	ldi	r24, 0x18	; 24
 186:	f1 50       	subi	r31, 0x01	; 1
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x90>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x9a>
 190:	00 00       	nop
				display_number(i);
				_delay_ms(1000);
			}

			PORTA = 0x01;
			for (int i = green_time; i >= 0; i--) {
 192:	21 97       	sbiw	r28, 0x01	; 1
 194:	60 f7       	brcc	.-40     	; 0x16e <main+0x78>
				if (mode != NORMAL) break;
				display_number(i);
				_delay_ms(1000);
			}

			PORTA = 0x02;
 196:	db ba       	out	0x1b, r13	; 27
			for (int i = yellow_time; i >= 0; i--) {
 198:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__data_start>
 19c:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <__data_start+0x1>
 1a0:	dd 23       	and	r29, r29
 1a2:	0c f4       	brge	.+2      	; 0x1a6 <main+0xb0>
				check_switches();
 1a4:	ba cf       	rjmp	.-140    	; 0x11a <main+0x24>
 1a6:	80 df       	rcall	.-256    	; 0xa8 <check_switches>
				if (mode != NORMAL) break;
 1a8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 1ac:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 1b0:	89 2b       	or	r24, r25
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <main+0xc0>
				display_number(i);
 1b4:	b2 cf       	rjmp	.-156    	; 0x11a <main+0x24>
 1b6:	ce 01       	movw	r24, r28
 1b8:	69 df       	rcall	.-302    	; 0x8c <display_number>
 1ba:	ef ef       	ldi	r30, 0xFF	; 255
 1bc:	f9 e6       	ldi	r31, 0x69	; 105
 1be:	28 e1       	ldi	r18, 0x18	; 24
 1c0:	e1 50       	subi	r30, 0x01	; 1
 1c2:	f0 40       	sbci	r31, 0x00	; 0
 1c4:	20 40       	sbci	r18, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0xca>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0xd4>
 1ca:	00 00       	nop
				display_number(i);
				_delay_ms(1000);
			}

			PORTA = 0x02;
			for (int i = yellow_time; i >= 0; i--) {
 1cc:	21 97       	sbiw	r28, 0x01	; 1
 1ce:	58 f7       	brcc	.-42     	; 0x1a6 <main+0xb0>
 1d0:	a4 cf       	rjmp	.-184    	; 0x11a <main+0x24>
				if (mode != NORMAL) break;
				display_number(i);
				_delay_ms(1000);
			}
		}
		else if (mode == SET_RED) {
 1d2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 1d6:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <main+0xea>
			PORTA = 0x04; // ???? ???? ???? ?????
			while (mode == SET_RED) {
 1de:	42 c0       	rjmp	.+132    	; 0x264 <main+0x16e>
				check_switches();
 1e0:	fb ba       	out	0x1b, r15	; 27
 1e2:	38 c0       	rjmp	.+112    	; 0x254 <main+0x15e>
				display_number(red_time);
 1e4:	61 df       	rcall	.-318    	; 0xa8 <check_switches>
 1e6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <red_time>
 1ea:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <red_time+0x1>
 1ee:	4e df       	rcall	.-356    	; 0x8c <display_number>

				if (!(PINB & (1 << PB5))) {
 1f0:	b5 99       	sbic	0x16, 5	; 22
 1f2:	17 c0       	rjmp	.+46     	; 0x222 <main+0x12c>
					red_time++;
 1f4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <red_time>
 1f8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <red_time+0x1>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <red_time+0x1>
 202:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <red_time>
					display_number(red_time);
 206:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <red_time>
 20a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <red_time+0x1>
 20e:	3e df       	rcall	.-388    	; 0x8c <display_number>
 210:	9f ef       	ldi	r25, 0xFF	; 255
 212:	e1 ee       	ldi	r30, 0xE1	; 225
 214:	f4 e0       	ldi	r31, 0x04	; 4
 216:	91 50       	subi	r25, 0x01	; 1
 218:	e0 40       	sbci	r30, 0x00	; 0
 21a:	f0 40       	sbci	r31, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x120>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x12a>
 220:	00 00       	nop
					_delay_ms(200);
				}
				if (!(PINB & (1 << PB6))) {
 222:	b6 99       	sbic	0x16, 6	; 22
 224:	17 c0       	rjmp	.+46     	; 0x254 <main+0x15e>
					red_time--;
 226:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <red_time>
 22a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <red_time+0x1>
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <red_time+0x1>
 234:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <red_time>
					display_number(red_time);
 238:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <red_time>
 23c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <red_time+0x1>
 240:	25 df       	rcall	.-438    	; 0x8c <display_number>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	81 ee       	ldi	r24, 0xE1	; 225
 246:	94 e0       	ldi	r25, 0x04	; 4
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x152>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x15c>
 252:	00 00       	nop
				_delay_ms(1000);
			}
		}
		else if (mode == SET_RED) {
			PORTA = 0x04; // ???? ???? ???? ?????
			while (mode == SET_RED) {
 254:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 258:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	09 f4       	brne	.+2      	; 0x262 <main+0x16c>
 260:	c1 cf       	rjmp	.-126    	; 0x1e4 <main+0xee>
					display_number(red_time);
					_delay_ms(200);
				}
			}
		}
		else if (mode == SET_GREEN) {
 262:	5b cf       	rjmp	.-330    	; 0x11a <main+0x24>
 264:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 268:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 26c:	02 97       	sbiw	r24, 0x02	; 2
			PORTA = 0x01; // ???? ??? ???? ?????
 26e:	09 f0       	breq	.+2      	; 0x272 <main+0x17c>
			while (mode == SET_GREEN) {
 270:	42 c0       	rjmp	.+132    	; 0x2f6 <main+0x200>
				check_switches();
 272:	eb ba       	out	0x1b, r14	; 27
 274:	38 c0       	rjmp	.+112    	; 0x2e6 <main+0x1f0>
				display_number(green_time);
 276:	18 df       	rcall	.-464    	; 0xa8 <check_switches>
 278:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <green_time>
 27c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <green_time+0x1>
 280:	05 df       	rcall	.-502    	; 0x8c <display_number>

				if (!(PINB & (1 << PB5))) {
 282:	b5 99       	sbic	0x16, 5	; 22
 284:	17 c0       	rjmp	.+46     	; 0x2b4 <main+0x1be>
					green_time++;
 286:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <green_time>
 28a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <green_time+0x1>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <green_time+0x1>
 294:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <green_time>
					display_number(green_time);
 298:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <green_time>
 29c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <green_time+0x1>
 2a0:	f5 de       	rcall	.-534    	; 0x8c <display_number>
 2a2:	ef ef       	ldi	r30, 0xFF	; 255
 2a4:	f1 ee       	ldi	r31, 0xE1	; 225
 2a6:	24 e0       	ldi	r18, 0x04	; 4
 2a8:	e1 50       	subi	r30, 0x01	; 1
 2aa:	f0 40       	sbci	r31, 0x00	; 0
 2ac:	20 40       	sbci	r18, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x1b2>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x1bc>
 2b2:	00 00       	nop
					_delay_ms(200);
				}
				if (!(PINB & (1 << PB6))) {
 2b4:	b6 99       	sbic	0x16, 6	; 22
					green_time--;
 2b6:	17 c0       	rjmp	.+46     	; 0x2e6 <main+0x1f0>
 2b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <green_time>
 2bc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <green_time+0x1>
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <green_time+0x1>
 2c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <green_time>
					display_number(green_time);
 2ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <green_time>
 2ce:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <green_time+0x1>
 2d2:	dc de       	rcall	.-584    	; 0x8c <display_number>
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	91 ee       	ldi	r25, 0xE1	; 225
 2d8:	e4 e0       	ldi	r30, 0x04	; 4
 2da:	81 50       	subi	r24, 0x01	; 1
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e0 40       	sbci	r30, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x1e4>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x1ee>
 2e4:	00 00       	nop
				}
			}
		}
		else if (mode == SET_GREEN) {
			PORTA = 0x01; // ???? ??? ???? ?????
			while (mode == SET_GREEN) {
 2e6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 2ea:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 2ee:	02 97       	sbiw	r24, 0x02	; 2
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <main+0x1fe>
 2f2:	c1 cf       	rjmp	.-126    	; 0x276 <main+0x180>
					display_number(green_time);
					_delay_ms(200);
				}
			}
		}
		else if (mode == BLINK_RED) {
 2f4:	12 cf       	rjmp	.-476    	; 0x11a <main+0x24>
 2f6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 2fa:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 2fe:	03 97       	sbiw	r24, 0x03	; 3
			while (mode == BLINK_RED) {
 300:	41 f5       	brne	.+80     	; 0x352 <main+0x25c>
 302:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 306:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 30a:	03 97       	sbiw	r24, 0x03	; 3
 30c:	09 f0       	breq	.+2      	; 0x310 <main+0x21a>
				check_switches();
 30e:	05 cf       	rjmp	.-502    	; 0x11a <main+0x24>
 310:	cb de       	rcall	.-618    	; 0xa8 <check_switches>
				PORTA = 0x04;
 312:	fb ba       	out	0x1b, r15	; 27
				PORTD = segment_po[0];
 314:	f8 01       	movw	r30, r16
 316:	80 81       	ld	r24, Z
 318:	82 bb       	out	0x12, r24	; 18
				PORTC = segment_po[1];
 31a:	81 81       	ldd	r24, Z+1	; 0x01
 31c:	85 bb       	out	0x15, r24	; 21
 31e:	ff ef       	ldi	r31, 0xFF	; 255
 320:	24 e3       	ldi	r18, 0x34	; 52
 322:	8c e0       	ldi	r24, 0x0C	; 12
 324:	f1 50       	subi	r31, 0x01	; 1
 326:	20 40       	sbci	r18, 0x00	; 0
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x22e>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x238>
 32e:	00 00       	nop
				_delay_ms(500);
				PORTA = 0x00;
 330:	1b ba       	out	0x1b, r1	; 27
 332:	9f ef       	ldi	r25, 0xFF	; 255
 334:	e4 e3       	ldi	r30, 0x34	; 52
 336:	fc e0       	ldi	r31, 0x0C	; 12
 338:	91 50       	subi	r25, 0x01	; 1
 33a:	e0 40       	sbci	r30, 0x00	; 0
 33c:	f0 40       	sbci	r31, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x242>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x24c>
 342:	00 00       	nop
					_delay_ms(200);
				}
			}
		}
		else if (mode == BLINK_RED) {
			while (mode == BLINK_RED) {
 344:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 348:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 34c:	03 97       	sbiw	r24, 0x03	; 3
 34e:	01 f3       	breq	.-64     	; 0x310 <main+0x21a>
				_delay_ms(500);
				PORTA = 0x00;
				_delay_ms(500);
			}
		}
		else if (mode == OFF) {
 350:	e4 ce       	rjmp	.-568    	; 0x11a <main+0x24>
 352:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 356:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 35a:	04 97       	sbiw	r24, 0x04	; 4
 35c:	09 f0       	breq	.+2      	; 0x360 <main+0x26a>
			while (mode == OFF) {
 35e:	dd ce       	rjmp	.-582    	; 0x11a <main+0x24>
 360:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 364:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 368:	04 97       	sbiw	r24, 0x04	; 4
 36a:	09 f0       	breq	.+2      	; 0x36e <main+0x278>
				check_switches();
 36c:	d6 ce       	rjmp	.-596    	; 0x11a <main+0x24>
 36e:	9c de       	rcall	.-712    	; 0xa8 <check_switches>
				PORTA = 0x00;
 370:	1b ba       	out	0x1b, r1	; 27
				PORTD = 0x00;
 372:	12 ba       	out	0x12, r1	; 18
				PORTC = 0x00;
 374:	15 ba       	out	0x15, r1	; 21
				PORTA = 0x00;
				_delay_ms(500);
			}
		}
		else if (mode == OFF) {
			while (mode == OFF) {
 376:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 37a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 37e:	04 97       	sbiw	r24, 0x04	; 4
 380:	b1 f3       	breq	.-20     	; 0x36e <main+0x278>
 382:	cb ce       	rjmp	.-618    	; 0x11a <main+0x24>

00000384 <__divmodhi4>:
 384:	97 fb       	bst	r25, 7
 386:	07 2e       	mov	r0, r23
 388:	16 f4       	brtc	.+4      	; 0x38e <__divmodhi4+0xa>
 38a:	00 94       	com	r0
 38c:	06 d0       	rcall	.+12     	; 0x39a <__divmodhi4_neg1>
 38e:	77 fd       	sbrc	r23, 7
 390:	08 d0       	rcall	.+16     	; 0x3a2 <__divmodhi4_neg2>
 392:	0b d0       	rcall	.+22     	; 0x3aa <__udivmodhi4>
 394:	07 fc       	sbrc	r0, 7
 396:	05 d0       	rcall	.+10     	; 0x3a2 <__divmodhi4_neg2>
 398:	3e f4       	brtc	.+14     	; 0x3a8 <__divmodhi4_exit>

0000039a <__divmodhi4_neg1>:
 39a:	90 95       	com	r25
 39c:	81 95       	neg	r24
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	08 95       	ret

000003a2 <__divmodhi4_neg2>:
 3a2:	70 95       	com	r23
 3a4:	61 95       	neg	r22
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255

000003a8 <__divmodhi4_exit>:
 3a8:	08 95       	ret

000003aa <__udivmodhi4>:
 3aa:	aa 1b       	sub	r26, r26
 3ac:	bb 1b       	sub	r27, r27
 3ae:	51 e1       	ldi	r21, 0x11	; 17
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <__udivmodhi4_ep>

000003b2 <__udivmodhi4_loop>:
 3b2:	aa 1f       	adc	r26, r26
 3b4:	bb 1f       	adc	r27, r27
 3b6:	a6 17       	cp	r26, r22
 3b8:	b7 07       	cpc	r27, r23
 3ba:	10 f0       	brcs	.+4      	; 0x3c0 <__udivmodhi4_ep>
 3bc:	a6 1b       	sub	r26, r22
 3be:	b7 0b       	sbc	r27, r23

000003c0 <__udivmodhi4_ep>:
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	5a 95       	dec	r21
 3c6:	a9 f7       	brne	.-22     	; 0x3b2 <__udivmodhi4_loop>
 3c8:	80 95       	com	r24
 3ca:	90 95       	com	r25
 3cc:	bc 01       	movw	r22, r24
 3ce:	cd 01       	movw	r24, r26
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
